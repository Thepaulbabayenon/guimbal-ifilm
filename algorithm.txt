export async function getRecommendedFilms(userId: string): Promise<Film[]> {
  try {
    const response = await fetch(`${baseUrl}/api/recommendations?userId=${userId}`);
    const data = await response.json();

    return data.films.map((film: any) => ({
      id: film.id,
      title: film.title,
      ageRating: film.ageRating,
      duration: film.duration,
      imageUrl: film.imageUrl,
      overview: film.overview,
      releaseYear: film.releaseYear,
      videoSource: film.videoSource,
      category: film.category,
      trailerUrl: film.trailerUrl,
      rank: film.rank,
      averageRating: film.averageRating,
    }));
  } catch (error) {
    console.error("Error fetching recommended films:", error);
    return [];
  }
}

type FilmId = number;

async function collaborativeFiltering(userId: string) {
  try {
    const userInteractionsData = await db
      .select({ filmId: userInteractions.filmId })
      .from(userInteractions)
      .where(eq(userInteractions.userId, userId));

    if (userInteractionsData.length === 0) {
      console.log(`No interactions found for user: ${userId}`);
      return [];
    }

    const filmIds = userInteractionsData.map((interaction) => interaction.filmId);
    const similarUserFilms = await db
      .select({ filmId: userInteractions.filmId })
      .from(userInteractions)
      .where(inArray(userInteractions.filmId, filmIds))
      .limit(8);

    console.log(`Collaborative recommendations for user ${userId}:`, similarUserFilms);

    return similarUserFilms.map((interaction) => ({ id: interaction.filmId }));
  } catch (error) {
    console.error("Error in collaborativeFiltering:", error);
    throw new Error("Failed to fetch collaborative recommendations");
  }
}

async function contentBasedFiltering(userId: string) {
  try {
    const userWatchedFilms = await db
      .select({ filmId: watchLists.filmId })
      .from(watchLists)
      .where(eq(watchLists.userId, userId));

    if (userWatchedFilms.length === 0) {
      return await getTopRatedFilms();
    }

    const categories = await db
      .select({ category: film.category })
      .from(film)
      .where(inArray(film.id, userWatchedFilms.map((f) => f.filmId)));

    const categoryList = categories.map((c) => c.category);

    if (categoryList.length === 0) {
      return await getTopRatedFilms();
    }

    return await db
      .select({
        id: film.id,
        title: film.title,
        ageRating: film.ageRating,
        duration: film.duration,
        imageUrl: film.imageUrl,
        overview: film.overview,
        releaseYear: film.releaseYear,
        videoSource: film.videoSource,
        category: film.category,
        trailerUrl: film.trailerUrl,
        rank: film.rank,
        averageRating: film.averageRating,
      })
      .from(film)
      .where(inArray(film.category, categoryList))
      .orderBy(desc(film.rank))
      .limit(8);
  } catch (error) {
    console.error("Error in contentBasedFiltering:", error);
    throw new Error("Failed to fetch content-based recommendations");
  }
}

export async function hybridRecommendation(userId: string) {
  try {
    console.log("üîÑ Starting hybrid recommendation for user:", userId);

    let collaborativeFilms: { id: number; title?: string }[] = [];
    let contentFilms: { id: number; title: string }[] = [];
    let userInteractionsData: { filmId: number; title: string; ratings: number }[] = [];
    let watchlistFilms: { id: number; title: string }[] = [];
    let watchedFilmsData: { filmId: number; title: string; currentTimestamp: Date }[] = [];

    
    try {
      userInteractionsData = await db
        .select({
          filmId: userInteractions.filmId,
          title: sql<string>`COALESCE(${film.title}, '')`,
          ratings: userInteractions.ratings,
        })
        .from(userInteractions)
        .leftJoin(film, eq(userInteractions.filmId, film.id))
        .where(eq(userInteractions.userId, userId))
        .orderBy(desc(userInteractions.timestamp))
        .limit(1);
    } catch (error) {
      console.error("‚ùå Error fetching user interactions:", error);
    }

    
    try {
      watchlistFilms = await db
        .select({
          id: watchLists.filmId,
          title: sql<string>`COALESCE(${film.title}, '')`,
        })
        .from(watchLists)
        .leftJoin(film, eq(watchLists.filmId, film.id))
        .where(eq(watchLists.userId, userId));
    } catch (error) {
      console.error("‚ùå Error fetching watchlist:", error);
    }


// Fetch user's watched films (most recent)
try {
  watchedFilmsData = await db
    .select({
      filmId: watchedFilms.filmId,
      title: sql<string>`COALESCE(${film.title}, '')`,
      currentTimestamp: sql<Date>`TO_TIMESTAMP(${watchedFilms.currentTimestamp})`,
    })
    .from(watchedFilms)
    .leftJoin(film, eq(watchedFilms.filmId, film.id))
    .where(eq(watchedFilms.userId, userId))
    .orderBy(desc(watchedFilms.currentTimestamp))
    .limit(1);
} catch (error) {
  console.error("‚ùå Error fetching watched films:", error);
}


 
    try {
      collaborativeFilms = await collaborativeFiltering(userId);
    } catch (error) {
      console.error("‚ùå Error in collaborativeFiltering:", error);
    }

    
    try {
      contentFilms = await contentBasedFiltering(userId);
    } catch (error) {
      console.error("‚ùå Error in contentBasedFiltering:", error);
    }

 
    const filmMap = new Map<number, { id: number; title?: string }>();
    collaborativeFilms.forEach((film) => filmMap.set(film.id, film));
    contentFilms.forEach((film) => filmMap.set(film.id, film));
    watchlistFilms.forEach((film) => filmMap.set(film.id, film));

    let recommendedFilms = Array.from(filmMap.values());

 
    if (recommendedFilms.length < 32) {
      const extraFilms = await getTopRatedFilms();
      recommendedFilms.push(...extraFilms.slice(0, 32 - recommendedFilms.length));
    }

  
    recommendedFilms = recommendedFilms.slice(0, 32);

   
    let reason1 = "Because you liked similar films";
    let reason2 = "Based on popular films";
    let reason3 = "Because you saved films to watch later";
    let reason4 = "Because you recently watched...";

    if (userInteractionsData.length > 0) {
      const lastInteraction = userInteractionsData[0];
      if (lastInteraction.ratings >= 4) {
        reason1 = `You rated "${lastInteraction.title}" highly`;
      } else {
        reason1 = `Because you watched "${lastInteraction.title}"`;
      }
    }

    if (watchedFilmsData.length > 0) {
      reason4 = `Because you recently watched "${watchedFilmsData[0].title}"`;
    }

 
    return [
      {
        reason: reason1,
        films: recommendedFilms.slice(0, 8),
      },
      {
        reason: reason2,
        films: recommendedFilms.slice(8, 16),
      },
      {
        reason: reason3,
        films: recommendedFilms.slice(16, 24),
      },
      {
        reason: reason4,
        films: recommendedFilms.slice(24, 32),
      },
    ];
  } catch (error) {
    console.error("‚ùå Error in hybrid recommendation:", error);
    throw new Error("Failed to fetch hybrid recommendations");
  }
}


export default async function handler(req: any, res: any) {
  const { userId } = req.query;

  if (!userId) {
    return res.status(400).json({ error: "User ID is required" });
  }

  try {
    let recommendations: any[] = [];

    try {
      const collaborativeFilms = await collaborativeFiltering(userId as string);

      if (collaborativeFilms.length > 0) {
        recommendations = await Promise.all(
          collaborativeFilms.map((film) => getFilmById(film.id))
        );
        return res.status(200).json(recommendations.slice(0, 8));
      }
    } catch (collabError) {
      console.error("Collaborative filtering failed:", collabError);
    }

    try {
      const contentFilms = await contentBasedFiltering(userId as string);
      if (contentFilms.length > 0) {
        return res.status(200).json(contentFilms.slice(0, 8));
      }
    } catch (contentError) {
      console.error("Content-based filtering failed:", contentError);
    }

    try {
      recommendations = await hybridRecommendation(userId as string);
      return res.status(200).json(recommendations.slice(0, 8));
    } catch (hybridError) {
      console.error("Hybrid recommendation failed:", hybridError);
    }

    return res.status(200).json([]);
  } catch (error) {
    console.error("Error fetching recommendations:", error);
    return res.status(500).json({ error: "Failed to fetch recommendations" });
  }
}



# Minimal Movie Recommendation System

```
FUNCTION GetRecommendations(userId)
    // Try methods in order, fall back as needed
    TRY RETURN HybridRecommendation(userId)
    ON FAIL TRY RETURN SimpleRecommend(userId)
    ON FAIL RETURN GetTopRated()
END FUNCTION

FUNCTION HybridRecommendation(userId)
    // Get recommendations from three strategies
    films1 = MatrixFactorization(userId)
    films2 = CollaborativeFiltering(userId)
    films3 = ContentBasedFiltering(userId)
    
    // Determine weights based on user data
    weights = CalculateWeights(userId)
    
    // Combine and score recommendations
    results = CombineWithWeights(films1, films2, films3, weights)
    
    RETURN CreateCategories(results)
END FUNCTION

FUNCTION MatrixFactorization(userId)
    // Matrix factorization using user-item ratings
    TrainFactorModel()
    RETURN PredictTopFilms(userId, 12)
END FUNCTION

FUNCTION CollaborativeFiltering(userId)
    // Find similar users based on watch history
    similarUsers = FindSimilarUsers(userId)
    
    // Return films liked by similar users
    RETURN GetFilmsFromSimilarUsers(similarUsers, userId)
END FUNCTION

FUNCTION ContentBasedFiltering(userId)
    // Extract preferences from user history
    prefs = GetUserPreferences(userId)
    
    // Find matching unwatched films
    RETURN FindSimilarFilms(prefs)
END FUNCTION
```

// FILM RECOMMENDATION SYSTEM - HYBRID APPROACH

function getRecommendations(userId):
  try:
    // 1. Try the most comprehensive approach first
    recommendations = hybridRecommendation(userId)
    return recommendations
  catch:
    // 2. Fallback approaches in order of decreasing complexity
    try: return matrixFactorizationRecommendations(userId)
    catch: try: return collaborativeFilteringRecommendations(userId)
    catch: try: return contentBasedRecommendations(userId)
    catch: return topRatedFilms() // Final fallback

function hybridRecommendation(userId):
  // Get recommendations from all three approaches in parallel
  [matrixResults, collabResults, contentResults] = runInParallel([
    matrixFactorization(userId),
    collaborativeFiltering(userId),
    contentBasedFiltering(userId)
  ])
  
  // Get user context data
  userRatings = getUserRatingHistory(userId)
  watchlist = getUserWatchlist(userId)
  watchHistory = getUserWatchHistory(userId)
  
  // Calculate weights based on available data
  mfWeight = hasRatingData ? 0.45 : 0.15
  cfWeight = hasWatchHistory ? 0.35 : 0.25
  cbWeight = (hasWatchlist || hasWatchHistory) ? 0.2 : 0.6
  
  // Create weighted scores for each film
  filmScores = new Map()
  
  // Add each recommendation source with weights
  weightedAdd(filmScores, matrixResults, mfWeight)
  weightedAdd(filmScores, collabResults, cfWeight)
  weightedAdd(filmScores, contentResults, cbWeight)
  
  // Sort films by weighted scores and get top results
  recommendedFilms = sortByScore(filmScores).slice(0, 32)
  
  // Personalize category names based on user data
  categories = createPersonalizedCategories(userRatings, watchHistory)
  
  // Group recommendations into 4 categories with 8 films each
  return createRecommendationGroups(recommendedFilms, categories)

function matrixFactorization(userId):
  // 1. Get all user-film ratings
  // 2. Create user and item latent factor matrices
  // 3. Train model using SGD (Stochastic Gradient Descent)
  // 4. Predict ratings for films user hasn't seen
  // 5. Return top predictions

function collaborativeFiltering(userId):
  // 1. Get films user has interacted with
  // 2. Find similar users based on overlapping film interactions
  // 3. Get films watched by similar users but not by current user
  // 4. Rank by average rating and popularity
  // 5. Return top recommendations

function contentBasedFiltering(userId):
  // 1. Get films user has watched
  // 2. Extract preferences (categories, years, ratings)
  // 3. Find films with similar attributes that user hasn't seen
  // 4. Rank by similarity and popularity
  // 5. Return top recommendations

function getTopRatedFilms():
  // Return most popular films as fallback